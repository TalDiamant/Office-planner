{"version":3,"sources":["comp/AddAppointment.js","comp/Appointment.js","comp/AllAppointments.js","App.js","serviceWorker.js","index.js"],"names":["AddAppointment","state","allGroups","react_default","a","createElement","className","Input","onChange","this","handleChange","bind","placeholder","name","type","map","g","key","value","Button","outline","color","onClick","passDataToApp","ev","setState","Object","defineProperty","target","props","addAppFunc","Component","Appointment","d","currentAppointment","date","years","slice","months","reversedDate","concat","Card","groupID","description","start","end","AllAppointments","_this","allappointments","comp_Appointment","refresh","ID","App","allAppointments","comp_AddAppointment","allgroups","AddAppToArr","comp_AllAppointments","newApp","oldAppArray","push","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b57ffb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Input } from 'reactstrap';\n\nclass AddAppointment extends Component {\n\n  state = {\n    allGroups:['Team A', 'Team B', 'Team C','Team D']\n  }\n\n  render() {\n    return (\n\n      <div className=\"add\">\n\n      <h1>Office schedule</h1>\n        <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter subject\" name=\"name\" />\n        <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter description\" name=\"description\" />\n        <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter date\" name=\"date\" type=\"date\" />\n        <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter start time\" name=\"start\" type=\"time\" />\n        <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter end time\" name=\"end\" type=\"time\" />\n\n        \n\n        <select className=\"custom-select\" onChange={this.handleChange.bind(this)} name=\"groupID\"  >\n          <option>select group</option>\n          {this.state.allGroups.map(g => <option key={g} value={g} >{g} </option>)}\n        </select>\n        <br />\n\n        <Button outline color=\"warning\" onClick={this.passDataToApp.bind(this)} >Add meeting</Button>\n        \n      </div>\n      \n\n    );\n  }\n\n\n  handleChange(ev) {\n    this.setState({ [ev.target.name]: ev.target.value });\n  }\n\n  passDataToApp() \n  {\n      this.props.addAppFunc(this.state)\n  }\n\n\n\n\n  \n\n   \n  \n\n\n}\n\nexport default AddAppointment;\n","import React, { Component } from 'react';\nimport { Card } from 'reactstrap';\n\n\nclass Appointment extends Component {\n  render() {\n\n    //reversing date display\n    var d = this.props.currentAppointment.date\n    var years = d.slice(0, 4);\n    var months = d.slice(5, 7);\n    var days = d.slice(8, 10);\n    var reversedDate = days.concat(\"-\").concat(months).concat(\"-\").concat(years)\n\n    return (\n      <div className=\"Appointment\">\n          <Card>\n              <h4>{this.props.currentAppointment.groupID}</h4>\n              <h5>{this.props.currentAppointment.name}-{this.props.currentAppointment.description}</h5>\n              <h5> {reversedDate},   {this.props.currentAppointment.start}-{this.props.currentAppointment.end}</h5>\n          </Card>\n      </div>\n    );\n  }\n\n\n\n\n\n\n\n}\n\nexport default Appointment;\n","import React, { Component } from 'react';\nimport Appointment from './Appointment';\n\n\n\nclass AllAppointments extends Component {\n\n  render() {\n    return (\n      <div className=\"list\">\n          {this.props.allappointments.map(a => <Appointment refresh={this.props.refresh} key={a.ID} currentAppointment={a} />)}       \n      </div>\n\n    );\n  }\n\n  handleChange(ev) {\n    this.setState({ [ev.target.name]: ev.target.value });\n  }\n\n}\n\nexport default AllAppointments;\n","import React, { Component } from 'react';\nimport AddAppointment from './comp/AddAppointment';\nimport AllAppointments from './comp/AllAppointments';\n\n \nclass App extends Component {\n\nstate={\n    allAppointments:[]\n}\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <AddAppointment    allgroups={this.state.allGroups} addAppFunc={this.AddAppToArr.bind(this)}  />\n      <AllAppointments   allappointments={this.state.allAppointments}   />  \n      </div>\n    );\n  }\n\n  AddAppToArr(newApp) {\n    let oldAppArray = this.state.allAppointments.slice();\n    oldAppArray.push(newApp);\n    this.setState({allAppointments: oldAppArray});\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}